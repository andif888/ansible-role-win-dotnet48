---
# tasks file for ansible-role-win-dotnet48
- name: Check installed
  ansible.windows.win_reg_stat:
    path: HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full
    name: Release
  register: dotnet48_release

- name: Debug dotnet48_release.exists
  ansible.builtin.debug:
    var: dotnet48_release.exists

- name: Debug dotnet48_release.value
  ansible.builtin.debug:
    var: dotnet48_release.value

- name: Download
  ansible.windows.win_get_url:
    url: '{{ dotnet48_download_url }}'
    dest: 'C:\Windows\Temp\{{ dotnet48_install_file }}'
    validate_certs: '{{ dotnet48_download_validate_certs }}'
    force: no
  when: dotnet48_release.value|int < 528049

- name: Install
  ansible.windows.win_package:
    path: 'C:\Windows\Temp\{{ dotnet48_install_file }}'
    arguments: /q /norestart
    state: present
  register: dotnet48_install
  when: dotnet48_release.value|int < 528049

- name: Reboot when required
  ansible.windows.win_reboot:
  register: has_rebooted
  when:
    - dotnet48_release.value|int < 528049
    - dotnet48_install is defined
    - dotnet48_install.reboot_required

- name: Optimize-PowershellAssemblies
  ansible.windows.win_shell: |
    $old_path = $env:path
    try {
      $env:path = [Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory()
      [AppDomain]::CurrentDomain.GetAssemblies() | % {
        if (! $_.location) {continue}
        $Name = Split-Path $_.location -leaf
        if ($Name.startswith("Microsoft.PowerShell.")) {
          Write-Progress -Activity "Native Image Installation" -Status "$name"
          ngen install $_.location | % {"`t$_"}
        }
      }
    } finally {
      $env:path = $old_path
    }
  when: 
    - has_rebooted.rebooted |default(false)
    - dotnet48_optimize_assemblies |bool
